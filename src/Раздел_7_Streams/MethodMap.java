package Раздел_7_Streams;

import java.util.*;
import java.util.stream.Collectors;

public class MethodMap {

    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("привет");
        list.add("как дела");
        list.add("ок");
        list.add("пока");
         /*
        Допустим мы хотим поменять содержимое нашего листа, на место этих слов поставить их длину
        Пример - вместо privet будет 6
         6 9 2 4
         */
        List<Integer> integerList = list.stream()
                .map(String::length)
                .collect(Collectors.toList());
        System.out.println("integerList = " + integerList);
        int[] array = {5, 9, 3, 8, 1};
        /*
        stream - это статический метод Arrays
        Если наш элемент нацело делится на 3, мы будем делить его на три, если не делится - ничего делать не будем
        Мы используем больше одного statement, поэтому пишем фигурные скобки
        */
        int[] ints = Arrays.stream(array).map(element -> {
            if (element % 3 == 0) {
                element = element / 3;
            }
            return element;
        }).toArray();
        System.out.println("ints = " + Arrays.toString(ints));
        Set<String> set = new TreeSet<>();
        set.add("привет");
        set.add("как дела?");
        set.add("ок");
        set.add("пока");
        // [2, 4, 6, 9]  Здесь будет сортировка
        Set<Integer> set2 = set.stream().map(String::length).collect(Collectors.toSet());
        System.out.println("set2 = " + set2);
        // Здесь не будет сортировки
        List<Integer> list3 = set.stream().map(String::length).collect(Collectors.toList());
        System.out.println("list3 = " + list3);
    }

}
/*
Stream появилась в Java 8
Stream - это интерфейс
Stream позволил программистам писать существенно короче то, что раньше занимало много строк кода, а именно
упростить работу с наборами данных, например упростить операции фильтрации, сортировки и другие манипуляции с
данными такими как коллекции или массивы.
Stream - это последовательность элементов, поддерживающих последовательные и параллельные операции над ними.
Stream это грубо говоря - поток данных, те которые содержат наша коллекция или массив.
Самое необходимое и нужное место использования лямбда выражений - это использование их в методах нашего стрима
Методы Stream позволяют нам писать быстрый и мощный код для работы с нашими коллекциями, таким образом Stream
позволяют писать код в функциональном стиле.
Метод map берёт по очереди каждый элемент из нашего стрима и сопоставляет ему элемент, из него получается после
применения на нём тех действий, который мы описываем внутри map, с помощью лямбда выражений.
Метод map принимает интерфейс Function, поэтому мы можем на input дать ему String, на output получить int.
Метод map возвращает Stream, мы не можем этот результат присвоить новому или уже имеющимися листу.
Мы должны сначала преобразовать этот поток в лист, для этого мы используем метод collect() и в параметре пишем
Collectors.toList().
Пример - collect(Collectors.toList())
Метод stream() возвращаем нам Стрим.
Стрим можно получить или создать несколькими способами
На выходе мы имеем поток от метода stream(), этот поток абсолютно не имеет отношения к multithreading, или
к Stream с помощью которых мы считаем или записываем что-то в файл. То есть методы с которыми мы будем работать на
этом уроке работают не напрямую с массивами или с коллекциями. А перед этим мы преобразуем массивы или коллекции в потоки.
Таким образом, после метода stream() наш поток содержит элементы
привет
как дела
ок
пока
Все методы Стрим не меняют саму коллекцию или массив на котором они были вызваны.
Метод map каждый элемент потока преобразует таким образом, как мы опишем в параметре метода map!
*/